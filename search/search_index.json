{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Uvod","text":"<p>Unity je popularan cross-platform game engine. Koristi se ra razvoj 3D, 2D, desktop, mobile, console i VR igara. Koristi programski jezik C#. Mi \u0107emo praviti 2D desktop platformer igru(Platformer je igra u kojoj se igra\u010d prealzi prepreke koriste\u0107i sposobnosti kao skakanje i penjanje, npr. Super Mario).</p> <p>Kada pokrenemo Unity Hub, kiknuti dugme New project.  Te odabrati 2D core i napisati ime svog projekta. </p> <p>Te onda kiknuti dugme Create project.</p> <p>Sada se upoznajemo sa layout-om Uinty-a. </p> <p>Hierarchy -  unutar toga \u0107e se nalaziti na\u0161i game objekti. Sample scene je level u kojem se nalazimo trenutno. </p> <p>Scene - prozor koji nam pokazuje pravi izgled igre. Tu se edituje igra.  </p> <p>Game - porzor u kojem vidimo izgeld igre kada se on igra.</p> <p>Inspector - prozor koji nam pokazuje informacije o game objektu kojeg posmatarmo. Tako\u0111e se koristi za dodavanje komponenti game objektu.</p> <p>Prozor za orijentaciju i prata\u017eivanje failova.</p> <p>Iznad Scene/Game prozora se nalaze dugmad za pokretanje i zaustavljanje igre.</p> <p>Da bi smo napravili game objekt, odemo mi\u0161em na Hierarchy i kliknemo desni klik. Pojaviti \u0107e se meni sa opcijama i odabrati 2D Object -&gt;Sprites -&gt; Square.</p> <p></p> <p>Kada to uradimo, imenovati game objekt Player. Te \u0107e se na ekranu pojaviti bijeli kvadrat.  I to je na\u0161 prvi game objekat.</p>"},{"location":"content/Igra/Animacija/","title":"Animacija","text":""},{"location":"content/Igra/Animacija/#animacija","title":"Animacija","text":"<p>Sada na\u0161 Player je samo nepomi\u010dna slika. Pa \u0107emo animacije za kretanje igra\u010da. Napraviti folder Animations. U\u0107i u folder, desni klik Create i na\u0107i Animations te kliknuit. Animaciju nazvati Idle.</p> <p></p> <p>Sada drag &amp; drop Idle animaciju na game objeckt Player. I treba da se pojavi ovo.</p> <p></p> <p>Sada dupli kilk na Idle animaciju  i treba da se pojavi prozor Animation. I dupli klika na game objekt Player.</p> <p></p> <p>I odabarti Idle animaciju.</p> <p>Sada oti\u0107i u folder u kojem se nalazi Idle animacija od na\u0161eg odabranog Playera. Te sve isje\u010dene slike iz slike Idle drag &amp; drop u pozor Animation. Te onda, ukoliko nema Sample Rate kliknuti 3 ta\u010dke te odabrati Show Sample Rate, i postavit na odgovaraju\u0107u brzinu po \u017eelji i kliknuti Play. I animacija bi tebala da radi.</p> <p></p> <p>Te sada kliknuti na animaciju, plavi trougao, i checkirati Loop Time. Ukolko to ne uradimo, kada pokrenemo igro animacija \u0107e pro\u0107i kroz jedan ciklus i stati.</p> <p></p> <p>Sada pokrenuti igru. Sada \u0107emo napravit animaciju za kratanje. Na\u0107i sliku Run, isje\u0107i i ponoviti porces.</p> <p>Kada ste to uradili, Windows --&gt; Animation --&gt; Animator.</p> <p></p> <p>Sada desni kliknuti na pravougaonik Idle, Make Transition, te spojiti sa animacijom Run. Spojiti i obrnuto.</p> <p></p> <p>Sada kliknuti na liniju \u0161to spaja Idle i Run. Unchekovati Has Exit Time i postavti Transition Duration na 0.</p> <p></p> <p>Uradti isto i za drugi tansition iz Run u Idle. Sada u Parameters kliknuti '+' --&gt; Bool i nazavti ga 'running'.</p> <p>I sada u transitions Conditions '+'. Treba da se pojavi na\u0161 running, u idle-&gt;run postaviti na true, a run-&gt;idle false.</p> <p></p> <p>U Inspectoru-&gt; Sprite Renderer na\u0107i Flip i checkirati X, to prouzrokuje da se sprite od Playera okrane na lijevu stranu, flipuje se vertikalno. Uncheckirati to sad. Otvoriti skriptu PlayerMovement i napraviti funkciju Animaton.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    private Rigidbody2D rb;\n\n    public float move_speed = 7f;\n    public float jump_speed = 7f; \n\n    private BoxCollider2D coll;\n    [SerializeField] private LayerMask ground;\n\n    private Animator anim;//napraviti variablu anim\n    private SpriteRenderer sprite;//i sprite\n\n    float dirX = 0;//deklariasti dirX\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n        coll = GetComponent&lt;BoxCollider2D&gt;();\n        anim = GetComponent&lt;Animator&gt;();//dodati komponente za Animator\n        sprite = GetComponent&lt;SpriteRenderer&gt;();//i SpriteRenedrer\n    }\n\n\n    private void Update()\n    {\n        dirX = Input.GetAxis(\"Horizontal\");\n        rb.velocity = new Vector2(dirX * move_speed , rb.velocity.y);\n\n        if(Input.GetButtonDown(\"Jump\") &amp;&amp; IsGrounded())\n        {\n            rb.velocity = new Vector2(rb.velocity.x,jump_speed);\n        }\n        Animation();//pozvati funkciju\n    }\n\n    private bool IsGrounded()\n    {\n        return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, ground);\n    }\n\n    private void Animation()\n    {\n\n        if(dirX &gt; 0f)//provjeravamo da li je dirX &gt; 0, tj. da li se karakter kre\u0107e desno\n        { \n            anim.SetBool(\"running\", true);//postavljmo na\u0161 condition running na true\n            sprite.flipX = false;//ovo nam postavlja u inspectoru u Sprite Rendereru filpX na false i plazer ponovno gleda na desno\n        }\n        else if(dirX &lt; 0f)//provjeravamo da li je dirX &gt; 0, tj. da li se karakter kre\u0107e lijevo\n        {\n            anim.SetBool(\"running\", true);//postavljmo na\u0161 condition running na true\n            sprite.flipX = true;//ovo nam flipa sprite od Playera na lijevu  stranu po vertikalno\n\n        }\n        else \n        {\n            anim.SetBool(\"running\", false);//ako nije pritisnuta tipka za kretanje vra\u0107a bool u false, te se animacija vra\u0107a u idle\n\n        }\n\n    }\n}\n</code></pre> <p>Sada napraviti animacije za skakanje i padanje(Jump and fall). To je samo po jedna slika. Sada u animatoru ih spojiti. Svaku animacjiu sa svakom.</p> <p></p> <p>Napomena: Transition izme\u0111u svake animacije traba da ima Transition Duration 0 i Has Exit Time uncheckovan.</p> <p>Sada po\u0161to imamo 4 animacije, zbog lak\u0161eg odre\u0111ivanja koja animacija trba da bude, napraviti \u0107emo posebnu varijablu i uslov za to. Obrisati 'running' parametar, te napraviti novi koji \u0107e biti int i nazvati ga 'state'. Taj prametar \u0107e i\u0107i od 0 do 3.</p> <p>0 - idle</p> <p>1 - run</p> <p>2 - jump</p> <p>3 - fall</p> <p>Sad u transition izme\u0111u svkai od njih dodati uslov.</p> <p></p> <p>U sredini u svakom transitionu postaviti na 'Equals', te poztavti broj za odr\u0111enu animaciju. Na koju animaciju strelica pokazuje, stavti broj od te animacije.</p> <p>Sada otvoriti skriptu sa animacijom.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    private Rigidbody2D rb;\n\n    public float move_speed = 7f;\n    public float jump_speed = 7f; \n\n    private BoxCollider2D coll;\n    [SerializeField] private LayerMask ground;\n\n    private Animator anim;\n    private SpriteRenderer sprite;\n\n    float dirX = 0;\n\n    private enum MovementState{idle, run, jump, fall};//parvimo enum(u c# to je ne\u0161to sl\u010dno listi intigera)\n    //koji imaju indekse od 0 do 3\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n        coll = GetComponent&lt;BoxCollider2D&gt;();\n        anim = GetComponent&lt;Animator&gt;();\n        sprite = GetComponent&lt;SpriteRenderer&gt;();\n    }\n\n\n    private void Update()\n    {\n        dirX = Input.GetAxis(\"Horizontal\");\n        rb.velocity = new Vector2(dirX * move_speed , rb.velocity.y);\n\n        if(Input.GetButtonDown(\"Jump\") &amp;&amp; IsGrounded())\n        {\n            rb.velocity = new Vector2(rb.velocity.x,jump_speed);\n        }\n        Animation();\n    }\n\n    private bool IsGrounded()\n    {\n        return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, ground);\n    }\n\n    private void Animation()\n    {\n        MovementState state;//lokalna varijabla state koja \u0107e imati vrijedosti iz onog gore enuma\n\n        if(dirX &gt;0)\n        {\n            state = MovementState.run;//postavljamo state to run(1)\n            sprite.flipX = false;\n        }\n        else if(dirX &lt; 0)\n        {\n            state = MovementState.run;//postavljamo state to run(1)\n            sprite.flipX = true;\n\n        }\n        else \n        {\n            state = MovementState.idle;//postavljamo state to idle(0)\n\n        }\n\n        if(rb.velocity.y &gt; 0.1)//ovjde ponovo parvimo if uslov, zato \u0161to igra\u010d mo\u017ee da se kre\u0107e kada ska\u010de, pa bi animacija bila run.\n        //Pa stvljamo ispod da se state prebaci u jump ili fall\n        {\n            state = MovementState.jump;//postavljamo state to jump(2)\n        }\n        else if( rb.velocity.y &lt; -0.1)\n        {\n            state = MovementState.fall;//postavljamo state to fall(13)\n        }\n\n        anim.SetInteger(\"state\", (int)state);//ovo postavlja na\u0161 ulsov state postavaljamo vrijednost od 0 do 3, state castiramo u int\n\n    }\n}\n</code></pre>"},{"location":"content/Igra/Animacija/#kamera-follow","title":"Kamera Follow","text":"<p>Sada primjetimo da kada nam se igra\u010d kre\u0107e kamera ostaje na istom mjestu, pa \u0107emo sada naparavit da se kamera pomjera zajedno sa igra\u010dem.</p> <p>window --&gt; Package Manager, odabrati Unity Registry i na\u0107i Cinemachine.</p> <p></p> <p>I kliknuti Insatll.</p> <p>U Hierarchy desni klik, sada bi treabala da se pojavi opcija Cinemachine i odabrati 2D Camera. Sada u u toj kameri u Folllow staviti na\u0161eg Playera.</p> <p></p> <p>I sada kada pokrenemo igru, kamera bi trebal da prati igra\u010da.</p>"},{"location":"content/Igra/GM1/","title":"Game Mechanics 1","text":""},{"location":"content/Igra/GM1/#item-collect-count","title":"Item Collect &amp; Count","text":"<p>Sada \u0107emo da naparvimo logiku i mehaniku kako da na\u0161 igra\u010d sakuplja stvari. U Pixel Adventures 1, na\u0107i folder Items, unutar njega Fruits, i odabarti jedanu od opcija. Te tu sliku isje\u0107i. Napraviti 2D objekt, sprite-&gt;square i postaviti mu ime. I napraviti animaciju za to vo\u0107e. Sada tom game objektu dodati Circle Collider 2D. I namjestiti veli\u010dinu Collidera sa slikom, i checkirati Is Trigger. Is Trigger se pona\u0161a tako \u0161to detektuje kada ne\u0161to u\u0111e u njegove granice, ali ne zaustavlja objekt. Sada \u0107emo napraviti tag. U Inspectoru Tag -&gt; Add Tag imenovati ga imenom vo\u0107a. Te ponovo, Add Tag i odabrati ga. Sada \u0107emo da naprvimo skriptu za detektovanje kada na\u0161 igra\u010d dodirne vo\u0107e.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ItemCollector : MonoBehaviour\n{\n    // Start i Update nam nisu potrebni za ovu skriptu \n    private void OnTriggerEnter2D(Collider2D collision)//funckija koja porvjerava dali je na\u0161 game objekt dodirnuo collider tipa trigger\n    {\n        if(collision.gameObject.CompareTag(\"Apple\"))//provjerava da li je dodirnuti game objekt ima tag Apple/ime vo\u0107a\n        {\n            Destroy(collision.gameObject);//uni\u0161tavamo taj game objekt, jer kada dodirnemo item, on treba da nestane\n        }\n    }\n}\n</code></pre> Dodati ovu skriptu na game objekt Player. Pokrenuti igru i porvjeriti dali radi kod. Sada \u0107emo da napravimo na\u0161 item prefab, po\u0161to \u0107emo da imamo vi\u0161e itema, u slu\u010daju da trabmo ne\u0161to da promjenimo, trabali bi smo pormijenuti na svakom game objktu kojeg dupliciramo.  To \u0107emo uraditi tako \u0161to \u0107emo drag &amp; drop na\u0161 item u Asset folder.</p> <p></p> <p>Sada bi na\u0161 item trebao da poplavi.</p> <p>Desni klik na na\u0161 item i odabrati duplicate.</p> <p></p> <p>I onda \u0107emo u na\u0161oj skripti dodati kod za brojanje.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ItemCollector : MonoBehaviour\n{\n    private int apple = 0;//naptaviti varijablu za brojanje i postavit joj vrijednost na 0\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Apple\"))\n        {\n            Destroy(collision.gameObject);\n            apple++;\n            Debug.Log(\"Apple: \" + apple);//ovo \u0107e da nam ispi\u0161e u konzoli na\u0161u varijblu\n       }\n    }\n}\n</code></pre> I pokrentu igru i vidjeti da li radi.</p> <p>Sada \u0107emo da naprvimo da nam se to ispi\u0161e na ekranu od igre. Desni klik u Hierarchy UI -&gt; Text-TextMeshPro.</p> <p></p> <p>Sada upisati u text \"Score: 0 \", promjeniti veli\u010dinu fonta po potrebi i postaviti ga u gornji lijevi uago.</p> <p></p> <p></p> <p>Tako\u0111e, ovdje odabrati \"Top Left\", ovo nam slu\u017ei za kada nam se ekran promjeni(jer nisu svi ekrani od ra\u010dunara iste veli\u010dine) da nam text ostane u istoj  pozici.</p> <p>Sada \u0107emo da dovr\u0161imo pisanje koda.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;//dodati ovo\nusing TMPro;//i ovo da bismo mogli da radimo sa textom\n\npublic class ItemCollector : MonoBehaviour\n{\n    private int apple = 0;\n    [SerializeField] private TMP_Text itemText;//napravti varijablu itemText tipa TMP_Text u koju \u0107emo da ubacimo na\u0161 text\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Apple\"))\n        {\n            Destroy(collision.gameObject);\n            apple++;\n            itemText.text = \"Score: \" + apple;// u na\u0161 tekst dodajemo na\u0161 broj pokupljenog vo\u0107a\n        }\n    }\n}\n</code></pre> <p>Pokrenuti igru i vidjeti da li radi.</p> <p>Sada \u0107emo jo\u0161 dodati i collect animaciju. U folderu Fruits, prona\u0107i sliku Collected isje\u0107i i napraviti animaciju. Te u animatoru dodati trigger collectedi dodati ga u transitionu izme\u0111u animacija. </p> <p>Te \u0107emo napraviti skriptu za to, FruitPop.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FruitPop : MonoBehaviour\n{\n    private Animator anim;//pravimo varijablu anim tipa animator\n\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();//dodajemo iz inspektora animator\n\n    }\n\n     private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.name == \"Player\")//provjeravamo da li je game objket sas kojim se dodirujemo\n        //ima ime Player\n        {\n            anim.SetTrigger(\"collected\");//uklju\u010dijemo trigger za anmiacjiu\n        }\n    }\n\n    private void DestroyFruit()//pravimo funkciju koja \u0107e se koristiti za event u animacjij\n    {\n        Destroy(gameObject);\n    }\n\n}\n</code></pre> U skripti ItemCollect izbrisati liniju koda Destroy(collision.gameObject);</p> <p></p> <p>Sada dodati event u animaciji Apple Collceted.</p> <p>Napomena: Ovo je dodano kasnije. U Death Logic je obija\u0161njeno kako radi event funckije u animaciji. Pa pogeldati dole.</p> <p></p>"},{"location":"content/Igra/GM1/#death-logic","title":"Death Logic","text":"<p>Sada \u0107emo napraviti interakciju igra\u010da i zamki, animaciju za smrt i restartovanje levela. Porna\u0107i u folderu Traps, floder Spikes. Sliku za spike pripremiti za kori\u0161tenje. Pa napraviti game object 2D square sprite i nazvati ga Spike. I dodati sliku. Dodati Box Collider 2D i namjestiti veli\u010dinu. Napraviti tag Trap i dodati ga na game objekt.</p> <p>Sada \u0107emo da napravimo animaciju za smrt igra\u010da. Oti\u0107i u folder Animacije i napraviti novu animaciju i nazvati je Death. I drag &amp; drop na game objekt Player. Sada u Main Characters na\u0107i sliku Dissapearing i isje\u0107i je(Isje\u0107i na 96X96). Te dodati slike u Death animaciju. Sada u animatoru animaciju Death spojiti sa Any State.</p> <p></p> <p>Napravti novi prametar tipa Trigger i nazvati ga death. U transition-u AnyState -&gt; Death dodati u contidions na\u0161 trigger.</p> <p></p> <p>Sada \u0107emo napraviti skriptu za death logic. U folderu Scripts, napraviti novi script PlayerDeath. <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;//doadati SceneManagement zbog restartovanja levela\n\npublic class PlayerDeath : MonoBehaviour\n{\n    private Animator anim;//napraviti varijable anim\n    private Rigidbody2D rb;//i rb\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();//dodati animator\n        rb = GetComponent&lt;Rigidbody2D&gt;();//i rigidbody u varijable\n    }\n\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Trap\"))\n        {\n            Die();//pozivamo funkciju Die\n        }\n    }\n\n    private void Die()\n    {\n        rb.bodyType = RigidbodyType2D.Static;//stavljamo body type na static jer kada igra\u010d \n        //umre on ne mo\u017ee da se kre\u0107e\n        anim.SetTrigger(\"death\");//aktiviramo na\u0161 trigger za animaciju\n    }\n\n    private void RestartLevel()\n    {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);//ovdje restarujemo level\n        //ovo radi tako \u0161to u\u010ditaje novu scenu, a GetActiveScene postavlja da scena bude \n        //trenutna scena u kojoj se nalazimo\n    }\n}\n</code></pre></p> <p>Funkciju RestartLevel \u0107emo pozvati u animaciji Death, zbog toga \u0161to ako to uradimo u funkciji Die ne\u0107emo imati vremena da se animacija zavr\u0161i. Dakle, \u017eelimo kada Player umre da se death animacjia zavr\u0161i, da po\u0111e malo vremena pa da se tek onda level restaruje. Otvoriti prozor za animacjie i odabrati animaciju Death. Kliknuti Add Event i stavti ga na kraj animacije ali ga pomaknuti jo\u0161 u desno. U Funcition odabrati Player Death -&gt; Methods -&gt; Restart Level()</p> <p></p> <p>I pokrenuti igru i vidjeti da li radi. Sada game objekt Spike napraviti u prefab.</p>"},{"location":"content/Igra/GM1/#moving-platforms","title":"Moving Platforms","text":"<p>Sada \u0107emo da napravimo platforme koje se kre\u0107u. U Pixel Adventure 1, u folderu Traps na\u0107i folder Platforms, te odabrati jednu platformu i isje\u0107i je. Zatim  napraviti game objekt i nazvati ga Platform i napraviti animaciju za njega. Sada nacrtati jo\u0161 levela. Napraviti Empty game objekt, nazvati ga Waypoint Follower. U inspektoru, ta\u010dni ispod imena Inspector se nalazi 3d kocka i kliknuti i odabrati ikonu. Sada duplicirati game objekt.</p> <p></p> <p>Waypoint Follower \u0107e nam slu\u017eiti kao ta\u010dka do koje \u0107e platforma do\u0107i i krenuti u suprotnom smjeru, taj game objekt se ne\u0107e vidjeti kada pokrenemo igru. Namjestiti da visina platforme i WF bude ista(y koordinata). Sada napraviti novi empty game objekt u koji \u0107emo smjestiti platformu i followere. Sada \u0107emo napraviti skriptu za kretanje platforme, nazvati WaypointFollower.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class WaypointFollower : MonoBehaviour\n{\n    [SerializeField] private GameObject[] waypoints;//pravimo array u koji \u0107emo smjestiti na\u0161e waypoints\n    private int currentIndex = 0;//postavljamo index za array\n\n    [SerializeField] private float speed = 2f;//postavljamo brzinu kojom \u0107e se \u0161latfofma kretati\n\n    private void Update()\n    {\n        if(Vector2.Distance(waypoints[currentIndex].transform.position, transform.position) &lt; 0.1f)//Vector2.Distance mjeri distancu izme\u0111u dva objekta.\n        //ona uzima dva argumenta poziciju objekta kojem se prbli\u017eavamo i objekt koji se pomjera.\n        {\n            currentIndex++;//pove\u0107avmo idex\n            if(currentIndex &gt;= waypoints.Length)//ako je index ve\u0107i od du\u017eine arraya \n            {\n                currentIndex = 0;//postavljamo ga na 0\n            }\n        }\n        transform.position = Vector2.MoveTowards(transform.position, waypoints[currentIndex].transform.position, Time.deltaTime*speed);\n        //postavljamo novu poziciju platforme. MoveTowards pomjera objekt\n        //ima tri arumenta, prvi i drugi su pozicije objkata, koji se pomjera i prema kojem se pomjera, respektivno\n        //tre\u0107i je brzina kojom se pomjera. Time.deltaTime govori koliko je sekundi engine procesirao pro\u0161li frame\n        //to radimo da nam pomjeranje platforme ne zavisi od frame rate, zbog toga \u0161to nemaju ekrani isti frame rate \n    }\n}\n</code></pre> <p>Sada dodati kolider i namjestiti veli\u010dinu. Sada \u0107emo napraviti skript da kada se Player na\u0111e na platformi da se kre\u0107e sa njom zajedno. Ali prvo dodati jo\u0161 jedan Box Collider2D i postaviti ga na Trigger. I postaviti ga iznad prvog collidera. Ovo radimo da nam se Player \"ne zalijepi\" kada igra\u010d dodiruje strane platforme.</p> <p></p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlatformMove : MonoBehaviour\n{\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.name == \"Player\")//provjeravamo da li objekat koji je u\u0161ao u collider ima Player\n        {\n            collision.gameObject.transform.SetParent(transform);//Postavljamo objekt Player kao child\n            //tj. u Hirearchy Player \u0107e se nalaziti u objektu Platform\n        }\n    }\n    private void OnTriggerExit2D(Collider2D collision)\n    {\n        if(collision.gameObject.name == \"Player\")\n        {\n            collision.gameObject.transform.SetParent(null);//kada Player iza\u0111e postavljamo mu Parent na NULL, tj. da nema parenta\n        }\n    }\n}\n</code></pre> I postvati Layer od Platfrome na ground, da bi Player mogao da ska\u010de kada je na platformi. I postaviti Order in Layer na 1, kada se Player nalazi na Platformi da izgleda ljep\u0161e.</p>"},{"location":"content/Igra/GM2/","title":"Game Mechanics 2","text":""},{"location":"content/Igra/GM2/#rotating-saw","title":"Rotating Saw","text":"<p>Prvo, redizajnirati \u0107emo level.</p> <p></p> <p>Sada u Pixel Adventure 1, na\u0107i folder Saw. Ijse\u0107i sliku, napravtit game objekt Rotating Saw, i napraviti animaciju. Dodati Circle Collider2D i dodati Waypoint Follower. Nparavti wayponits.</p> <p></p> <p>Namjestiti da x koordinate budu iste kao u Rotating Saw. I staviti tag Trap.</p>"},{"location":"content/Igra/GM2/#multiple-levels","title":"Multiple Levels","text":"<p>Sada \u0107emo dodati jo\u0161 jedan level u na\u0161u igru. To \u0107emo uraditi tako \u0161to \u0107emo staviti trigger na kraj levela. Pa prvo \u0107emo napraviti novi game objekat. I nazvati ga Finish. Onda u folderu PA 1 na\u0107i folder Checkpoint i isje\u0107i prvu sliku. Nakon toga napraviti animaciju. Game objektu dodati Box Collider 2D i postavti ga na trigger. I staviti ga na kraj levela.</p> <p></p> <p>Nakon toga oti\u0107i u foleder Scenes, preimenovati postoje\u0107i scene u Level 1. Prije toga napravidi game objekte kaou \u0161to su Player, RS, MP u prefabas  da mo\u017eemo ih mjenjati samo jednom za sve levle.  Klikntui na njega te pritisnuti Ctrl+D, da bi napravili jo\u0161 jedan level. Te promijeniti izgled levela da mo\u017eemo rzlikovati izme\u0111u dva.</p> <p></p> <p>Nakon toga kliknuti File-&gt;Build Settings. Te kliknuti Add Opne Scene. Pomo\u0107u ovoga \u0107emo u skripti mjenjati level.</p> <p></p> <p>Sada \u0107emo napisati skriptu Finish.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;//uklju\u010diti namespace SceneManagement\n\npublic class Finish : MonoBehaviour\n{\n\n    private void OnTriggerEnter2D(Collider2D collision)\n\n        if(collision.gameObject.name == \"Player\")//provjeravamo da li na\u0161 game objekt dodiruje Playera\n        {\n            Invoke(\"CompleteLevel\", 2f);//funkcija Invoke slu\u017ei nam da se funkcija koja se poziva deleja\n            //za odre\u0111eni broj sekundi, dakle prvi argument je string koji je ime funkcije, a drugi je broj sekundi\n\n\n        }\n    }\n\n    private void CompleteLevel()//pravimo funkciju\n    {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1);//ova funkcija u\u010ditaje novi level tako \u0161to \n        //od starog levela uzme index i doda jedan\n    } \n}\n</code></pre> <p>Dodati skript na game objekt Finish i isprobsti da li radi.</p> <p>Napomena: Treba biti pokrenuti prvi level.</p>"},{"location":"content/Igra/GM2/#sound-effect-music","title":"Sound Effect &amp; Music","text":"<p>Sada \u0107emo dodati muziku i sound efekte u na\u0161u igru. Prvo \u0107emo na\u0107i file-ove za to. Kliknuti Windows-&gt;Asset Store. Kliknuti na Audio. Te downloadovti ova dva file-a.</p> <p></p> <p>Nakon toga oti\u0107i na Windows-&gt;Package Manager. Klinuti downolad i import za oba file-a.</p> <p></p> <p>Rad sa zvukom u Unity-u zahtjeva dvije stvari Audio Source i Audio Listener. Main Camera je po defaultu Audi Listener, tako da samo trebamo da odredimo Audio Source-ove. Zbog toga odabrati prefab Player-a i dodati mu komponentu Audio Source.</p> <p>Napomena: Svaki put kada ne\u0161to promijenimo na prefabu, desni klik Refresh, ovo \u0107e napraviti promijne na svakom to prefab game obijktu u levelima</p> <p>Sada \u0107emo odabrati sound efekte za na\u0161u igru.</p> <p>DM-CGS-21 - Collect(Mo\u017eete preimenovati, radi lak\u0161eg snala\u017eenja)</p> <p>DM-CGS-32 - Jump</p> <p>DM-CGS-18 - Finish</p> <p>DM-CGS-17 - Death</p> <p>Sada dodati sound Jump u slot Audio Clip</p> <p></p> <p>I isklu\u010ditit Play On Awake Sada oti\u0107i u Player Movement skriptu i dodati dvije linije koda. <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    private Rigidbody2D rb;\n\n    public float move_speed = 7f;\n    public float jump_speed = 7f; \n\n    private BoxCollider2D coll;\n    [SerializeField] private LayerMask ground;\n\n    private Animator anim;\n    private SpriteRenderer sprite;\n\n    float dirX = 0;\n\n    private enum MovementState{idle, run, jump, fall};\n\n    [SerializeField] private AudioSource jumpSoundEffect;//dodajemo polje za na\u0161 audio klip\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n        coll = GetComponent&lt;BoxCollider2D&gt;();\n        anim = GetComponent&lt;Animator&gt;();\n        sprite = GetComponent&lt;SpriteRenderer&gt;();\n    }\n\n\n    private void Update()\n    {\n        dirX = Input.GetAxis(\"Horizontal\");\n        rb.velocity = new Vector2(dirX * move_speed , rb.velocity.y);\n\n        if(Input.GetButtonDown(\"Jump\") &amp;&amp; IsGrounded())\n        {\n            rb.velocity = new Vector2(rb.velocity.x,jump_speed);\n            jumpSoundEffect.Play();//ova funkicija pu\u0161ta audio klip\n        }\n        Animation();\n    }\n\n    .\n    .\n    .\n</code></pre> Sada drag &amp; drop audio source u polje u Player Movement skripti.</p> <p></p> <p>Sada \u0107emo istu stvar uradtit i za collect i death audio. Dodati jo\u0161 audio source za collect i death i ubaciti audio klipove. <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\n\npublic class ItemCollector : MonoBehaviour\n{\n    private int apple = 0;\n    [SerializeField] private TMP_Text itemText;\n\n    [SerializeField] private AudioSource collectSoundEffect;//dodajemo polje za na\u0161 audio klip\n\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Apple\"))\n        {\n            Destroy(collision.gameObject);\n            collectSoundEffect.Play();//ova funkicija pu\u0161ta audio klip\n            apple++;\n            itemText.text = \"Score: \" + apple;\n        }\n    }\n}\n</code></pre> I death audio klip</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class PlayerDeath : MonoBehaviour\n{\n    private Animator anim;\n    private Rigidbody2D rb;\n    [SerializeField] private AudioSource deathSoundEffect;//dodajemo polje za na\u0161 audio klip\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n    }\n\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Trap\"))\n        {\n            Die();\n        }\n    }\n\n    private void Die()\n    {\n        rb.bodyType = RigidbodyType2D.Static;\n        deathSoundEffect.Play();//ova funkicija pu\u0161ta audio klip\n        anim.SetTrigger(\"death\");\n    }\n\n    private void RestartLevel()\n    {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    }\n}\n</code></pre> <p>Za Finish \u0107emo na prefab od game objekta Finish dodati komponentu Audio Spurce i audio klip Finish. Te dodatdi u skripti Finish dodati kod za audio.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class Finish : MonoBehaviour\n{\n    [SerializeField] private AudioSource finishSoundEffect;//dodajemo polje za na\u0161 audio klip\n\n    private bool levelCompleted = false;//pravimo varijablu za provijeru da li smo ve\u0107 dodirnuli finish\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if(collision.gameObject.name == \"Player\" &amp;&amp; levelCompleted == false)//provijeravamo da li smo prije dodirnuli finish\n        //ovo radimo zbog toga \u0161to bi se audio klip pu\u0161tao svaki put kada dodirnemo finish\n        //ako nismo ovo \u0107e se samo jednom izvr\u0161iti\n        {\n            finishSoundEffect.Play();//ova funkicija pu\u0161ta audio klip\n            levelCompleted = true;//postavljamo levelCompleted na true\n            Invoke(\"CompleteLevel\", 2f);\n\n\n        }\n    }\n\n    private void CompleteLevel()\n    {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1);\n    }\n\n\n}\n</code></pre> I jo\u0161 na kraju Background music. Napraviti Empty Game Object i dodati Audio Source kompnentu. Odabrati jedanu melodiju iz CasualGameBGM05. U Audio source checkirati Play on Awake &amp; Loop, te smanjiti Volume po \u017eelji.</p>"},{"location":"content/Igra/GM2/#start-game-over-menu","title":"Start &amp; Game Over Menu","text":"<p>U folderu Scene desni klik Create-&gt;Scene. Nazvati je Start Menu. Pokrenuti Main Menu scenu. U Hierarchy desni klik UI-&gt;Pnael.  Sada promijenti boju po \u017eelji i dodati tekst. I dodati dugme. Desni klik na Panel UI-&gt;Button.</p> <p></p> <p>Sada \u0107emo naprviti sktiptu koju \u0107emo dodati na button da mo\u017eemo pokrentui igru.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class GameStart : MonoBehaviour\n{\n    public void StartGame()\n    {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex +1);//funkcija koja uzima index od aktivne\n        scene i dodajemo +1\n    }\n}\n</code></pre> Sada u Build Settings postaviti start menu na 0-ti inedx.</p> <p></p> <p>Dodati skriptu na Button. I kliknuti + na On Click. Drag &amp; Drop skriptu u polje ispod Runtime On. I izabrati funkciju StartGame.</p> <p></p> <p></p> <p>Sada u Scene folderu doati jo\u0161 jednu scenu i nazvati je Game Over. Ponovo dodati panel i button. Button \u0107e nam slu\u017eiti za izla\u017eenje iz igre. Te napraviti skriptu GameEnd.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GameEnd : MonoBehaviour\n{\n    public void Quit()\n    {\n        Application.Quit();//funkcija quit zatvara aplikaciju\n        //Napomena ovo samo radi kada se igra builda, tako da sada u preview ne\u0107e raditi\n    }\n}\n</code></pre> <p>Ponovo dodati skriptu na button i  Drag &amp; Drop skriptu u polje ispod Runtime On. I izabrati funkciju Quit. I u Build Settings dodati Game Over level.</p> <p></p>"},{"location":"content/Igra/GM3/","title":"Game Mechanics 3","text":""},{"location":"content/Igra/GM3/#broj-zivota","title":"Broj \u017eivota","text":"<p>Sada \u0107emo napraviti da nam igra\u010d ima 3 \u017eivota. Otvoriti skriptu PlayerDeath</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class PlayerDeath : MonoBehaviour\n{\n    private Animator anim;\n    private Rigidbody2D rb;\n    [SerializeField] private AudioSource deathSoundEffect;\n    private static int lives = 3;//napraviti static varijablu lives\n    //static jer kada Player umre da se vrijednost varijable ne resetuje\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n    }\n\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Trap\"))\n        {\n            Die();\n        }\n    }\n\n    private void Die()\n    {\n        rb.bodyType = RigidbodyType2D.Static;\n        deathSoundEffect.Play();\n        anim.SetTrigger(\"death\");\n\n\n    }\n\n    private void RestartLevel()\n    {\n        lives--;//smanjiti lives za 1\n        if(lives &gt; 0)//postaviti ulsov\n        {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);//restartovanje levela\n        }   \n        else//ako je broj \u017eivota 0\n        {\n            SceneManager.LoadScene(\"Game Over\");//u\u010ditati level Game Over\n        }\n    }\n\n}\n</code></pre> <p>U game objektu Canvas, gde je tekst za iteme dodati tekst za \u017eivote. I postaviti ispod Score.</p> <p> </p> <p>I onda u kod dodati jo\u0161 dio za ispis broje \u017eivota.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing TMPro;//dodati namespace TMPro\n\npublic class PlayerDeath : MonoBehaviour\n{\n    private Animator anim;\n    private Rigidbody2D rb;\n    [SerializeField] private AudioSource deathSoundEffect;\n    [SerializeField] private TMP_Text livesText;//napraviti varijablu livesText\n    private static int lives = 3;\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n    }\n    private void Update()//dodati Update funkciju\n    {\n        livesText.text = \"Lives: \" + lives;//naredba za ispis\u017eivota\n    }\n\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if(collision.gameObject.CompareTag(\"Trap\"))\n        {\n            Die();\n        }\n    }\n\n    private void Die()\n    {\n        rb.bodyType = RigidbodyType2D.Static;\n        deathSoundEffect.Play();\n        anim.SetTrigger(\"death\");\n\n\n    }\n\n    private void RestartLevel()\n    {\n        lives--;\n        //livesText.text = \"Lives: \" + lives;\n        if(lives &gt; 0)\n        {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n        }   \n        else\n        {\n            SceneManager.LoadScene(\"Game Over\");\n        }\n    }\n\n}\n</code></pre>"},{"location":"content/Igra/GM3/#falling-platforms","title":"Falling Platforms","text":"<p>Npraviti game objekt Falling Platform U PA1 na\u0107i folder Falling Platforms, isje\u0107i sliku i napraviti animaciju. Dodati Box Collider 2D i namijestiti odgovaraju\u0107u veli\u010dinu. Zatim dodati Rgigd Body 2D i napraviti da BOdy Type bude Static.  Sada \u0107emo napisati skriptu.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FallingPlatfrom : MonoBehaviour\n{\n    private Rigidbody2D rb;//napraviti varijablu tipa RigidBody2D\n    private bool isFalling = false;//\n    public float delayFall = 1f;//varijbala za delay za padanje platforme\n    public float delayDestroy = 1f;//varijabla za delay za uni\u0161tenje platforme\n\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();//dodajemo komponentu RigidBody\n    }\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if (collision.gameObject.name == \"Player\" &amp;&amp; !isFalling)//provjeravomo da li game objekt ima ime Player\n        //da li je ve\u0107 dodirnuo platformu, da se funkija Fall ne bi zvala ponovo svaki put \n        {\n            Invoke(\"Fall\", delayFall);//invoke poziva funkciju sa deleyom za odre\u0111eni broj sekundi\n            isFalling = true;//postavljamo isFalling na true\n        }\n    }\n\n    private void Fall()\n    {\n        rb.bodyType = RigidbodyType2D.Dynamic;//stavljamo da je body type dynamic da platforma pada\n        Invoke(\"DestroyPlatform\", delayDestroy);//pozivamo kroz invoke funkciju DestroyPlatform za odre\u0111eni broj sekundi\n    }\n\n    private void DestroyPlatform()\n    {\n        Destroy(gameObject);//uni\u0161tava game objekt\n    }\n}\n</code></pre> <p>Dodati skriptu na game objekt i napraviti objekt prefab.</p> <p>Napomena: Staviti Layer na ground da bi igra\u010d mogao da ska\u010de kada se nalazi na platformi.</p> <p>Namjestiti vrijeme padanja i uni\u0161tenja, i isprobati u igri.</p> <p></p>"},{"location":"content/Igra/GM3/#jump-springstrampoline","title":"Jump Springs/Trampoline","text":"<p>Napraviti novi game objekt i nazvati ga Jump Spring. U foldru PA1 na\u0107i folder Trampoline, isje\u0107i sliku i napraviti animaciju, i idle animacjiu samo sa idle slikom. U Animatoru napraviti bool parameatar isJumped i postaviti ga u transicijama izme\u0111u idle i jump animacije.</p> <p></p> <p>Idle -&gt; Jump - condition postaviti na ture.</p> <p>Jump -&gt; Idle - false.</p> <p>Dodati Box Collider na game objekt. Sada \u0107emo napisati skriptu.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Spring : MonoBehaviour\n{\n    private Animator anim;//pravimo varijablu anim\n    public float jumpforce = 11f;//varijablu jumpforce\n\n    void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();    \n    }\n\n\n    private void OnCollisionEnter2D(Collision2D collision)\n    {\n        if(collision.gameObject.name == \"Player\")\n        {\n            anim.SetBool(\"isJumped\", true);//postavljamo isJumped ulov za animaciju na true\n        }\n        if(collision.relativeVelocity.y &lt;= 0f)\n        {\n            Rigidbody2D rb = collision.collider.GetComponent&lt;Rigidbody2D&gt;();//pravimo varijblu rb tipa rigidbody\n        //koja uzima rigidbody od game objekta sa kojim se spring dodiruje, tj. od igra\u010da\n            if(rb != null)\n            {\n                Vector2 velocity = rb.velocity;//pravimo nvu varijablu velocity tipa vector, koji uzima  brzinu od igra\u010da\n                velocity.y = jumpforce;//brzinu po y osi postavljamo na na\u0161 jumpforce\n                rb.velocity = velocity;//igra\u010du postavljamo novu brzinu\n\n            }\n        }\n    }\n    private void OnCollisionExit2D(Collision2D collision)\n    {\n        if(collision.gameObject.name == \"Player\")\n        {\n            Invoke(\"isJumped\",0.25f);//ovdje je invoke zbog toga da se jump animacija od springa izvr\u0161i\n            //uprotivnom \u0107e odma prebaciti na idle animation\n        }\n\n    }\n\n    private void isJumped()\n    {\n        anim.SetBool(\"isJumped\", false);//postavljamo isJumped ulov za animaciju na false\n    }\n}\n</code></pre> <p>Napomena: Postaviti Layer game objekta na gruond.</p>"},{"location":"content/Igra/GM3/#enemies","title":"Enemies","text":"<p>Sada \u0107emo napraviti enemies za na\u0161u igru. Sprites za enemies download-ati na linku ili na github-u. Napraviti novi game objekt Enemie i odabrati jednog od enemia, isj\u0107i run i hit sliku i napravitzi animacije. I napraviti transition iz Run -&gt; Hit, sa triggerom hit. Dodati Box Collider 2D  i postaviti tag na Trap. Sada \u0107emo za kretanje koristiti skriptu WaypointFollower, koju \u0107emo malo editiovati <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class WaypointFollower : MonoBehaviour\n{\n    [SerializeField] private GameObject[] waypoints;\n    private int currentIndex = 0;\n    public bool isEnemie = false;//dodati varijeblu koja \u0107e nam su\u017eiti da provjeravamo da li je game objekt enemie\n\n    private SpriteRenderer sprite;//dodati vatijablu sprite\n    [SerializeField] private float speed = 2f;\n\n    private void Start()\n    {\n        sprite = GetComponent&lt;SpriteRenderer&gt;();//dodati u nju komponentu SpriteRenderer\n    }\n\n    private void Update()\n    {\n        if(Vector2.Distance(waypoints[currentIndex].transform.position, transform.position) &lt; 0.1f)\n        {\n            currentIndex++;\n            if(currentIndex &gt;= waypoints.Length)\n            {\n                currentIndex = 0;\n            }\n            if(isEnemie)//ako je game objekt enemie\n            {\n                sprite.flipX = !sprite.flipX;//flipati mu sprite po x osi\n                //tj. da nam se enemie okrene kada do\u0111e do waypointa\n            }\n        }\n        transform.position = Vector2.MoveTowards(transform.position, waypoints[currentIndex].transform.position, Time.deltaTime*speed);\n    }\n}\n</code></pre></p> <p>Sada \u0107emo da napravimo da enemie bude uni\u0161ten kada mu igra\u010d sko\u010di na glavu. Dodati jo\u0161 jedan Box Collider 2D i njega postaviti da bude Trigger.</p> <p></p> <p>I jo\u0161 \u0107emo napreviti da igra\u010d dobije bodove kada ubije enemia. Pa u ItemCollector skripti varijablu apples postaviti na public static, da bi joj mogli pristupiti iz drugoe skripte, tj. da bude globalna varijabla.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class EnemieHit : MonoBehaviour\n{\n    private Animator anim;//dodati varijablu anim\n    public int hitPoints = 5;//dodati varijablu za broj bodova\n\n    private void Start()\n    {\n        anim = GetComponent&lt;Animator&gt;();//dodati komponentu Animator\n    }\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n       if(collision.gameObject.name == \"Player\")//porvjeriti da li je game objekt Player\n       {\n        ItemCollector.apple += hitPoints;//prstupamo varijabli apple iz skripte ItemCollector i dodajemo joj bodove\n        ChangeTag(\"Untagged\");//mijenjamo tag u Untagged da nam Player ne umre, jer \u0107e dotaknuti donji Collider\n        //a to \u0107e izazvati smrt Playera\n        anim.SetTrigger(\"hit\");//stavimo trigger za animaciju\n       }\n    }\n\n    private void DestroyObj()\n    {\n        Destroy(gameObject);//uni\u0161tavamo objekt\n    }\n\n    void ChangeTag(string newTag)//funkcija kojom mijenjamo tag game objekta\n    {\n\n        gameObject.tag = newTag;\n    }\n}\n</code></pre> <p>I pokrenuti igru i provjeriti da li radi, i napraviti Enime prefab.</p> <p>Na karju u Build Settings kliknuti Build and Run \u0161to \u0107e napravtit aplikaciju za igru.</p>"},{"location":"content/Igra/Kretanje/","title":"Kretanje","text":""},{"location":"content/Igra/Kretanje/#fizika","title":"Fizika","text":"<p>Dupli klik na game objekt player. Te oti\u0107i na prozor Inspector, tu se nalaze inforamcije vezane za game objekt.</p> <p>Transform - pokazuje poziciju, rotaciju i veli\u010dinu igr\u010da.</p> <p>Sprite Renderer - pokazuje inforamcije vezane za izgled game objekta.</p> <p>Kliknuti na Add Component i napisati Rigidbody 2D</p> <p> </p> <p>Rigidbody 2D je  komponenta koja je zadu\u017eena za fiziku game objekta.</p> <p>Sada napraviti novi game objekt, koji \u0107emo nazvait Paltform. Kliknuti na Platform, te ga skalirati Sacle X = 10. I pormjenuti mu boju u Sprite Rendereru.</p> <p></p> <p>Takode, dodati Rigidbody 2D i staviti Body Type Static</p> <p>Static zana\u010di kada se igra pokrene da na game objekt ne\u0107e djelovati garvitacija i game objekt se ne\u0107e pomjerati.</p> <p>Dynamic zna\u010di da na game object djeluje gravitacija i tijelo mo\u017ee da se pomjera.</p> <p>Sada ponovo kliknuti na Player i na inspector, Add Component Box Collider 2D</p> <p>Box Collider 2D slu\u017ei da bi se oko game objekta napravio hit box, te bi onda game objekt pravio interakcije sa drugim game objektima, i ne bi prolazio kroz njih.</p> <p>Dodati Box Collider 2D i na Platform.</p> <p>Pomjeriti Player-a iznad Platform-e tako da bude prostora izme\u0111u njih te pokrenuti igru. Player bi trebao pasti na Platformu i ostati na njoj.s</p>"},{"location":"content/Igra/Kretanje/#kretanje","title":"Kretanje","text":"<p>U prozoru za pretra\u017eivnje failova u folderu Assets, desni klik Create --&gt; Folder. Folder nazvati Scripts. Kliknuti na njega, te ponovo desni klik Create --&gt; C# Script. Skriptu nazvati PlayerMovement.</p> <p>Sada pokrenuti skriptu.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    //Start() i Update() su dvije osnovne funkcije\n    //Start je funkcija/metoda koja se poziva samo jednom prije prvoga farme-a\n    //To se obicno se u varijable dodjeljuju/uzimaju vrijednosti komponenate od game objekta iz inspectora\n    void Start()\n    {\n\n    }\n\n   //Update se poziva svaki frame te izvrsava naredbe koje se tu nalaze\n    void Update()\n    {\n\n    }\n}\n</code></pre> <p>Sada napi\u0161imo kod za kretanje i skakanje Player-a.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    private Rigidbody2D rb;//deklarisanje varijeble rb tipa Rigidbody2D\n    public float move_speed = 7f;//deklarisanje i inicijalizija varijable move_speed, koja odra\u0111uje brzinu kretanja Player-a \n    public float jump_speed = 7f;//deklarisanje i inicijalizija varijable jump_speed, koja odra\u0111uje brzinu skakanja Player-a \n    //deklarisanje varijable na public omogu\u0107ava mjenjanje vrijednosti varijable unutar komponente u Inspectoru\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();//u varijablu inicijaliziramo virjednosti komponente Rigidbody2D iz inspectora\n    }\n\n\n    private void Update()\n    {\n        float dirX = Input.GetAxis(\"Horizontal\");//varijabla u kojoj inicijaliziramo vrijednosti koje dobijemo kada pritisnemo tipke \"&lt;-\" i \"-&gt;\"\n        //pritisak tipke \"&lt;-\" postavlja vrijednost -1, a tipka \"-&gt;\" postavlja vrijednost 1\n        //tako\u0111e, ako imamo joystick vrijednost mo\u017ee da bude izme\u0111u -1 i 1\n        //ova vrijednost \u0107e nam govoriti u koju stranu se Player kre\u0107e\n\n        rb.velocity = new Vector2(dirX * move_speed , rb.velocity.y);//mjenjanje vrijednosti brzine tijela Player-a\n        //Vector2 je tip poidatka koji ima dvije vrijednosti\n        //prva ovdje prestavlja brzinu po x-osi, a druga po y-osi\n        //sa varijablom dirX mjenjamo smijer kreatnja Player-a\n        //brzina po y-osi ostaje ista\n\n        if(Input.GetButtonDown(\"Jump\"))//provjeravamo da li je pritisnut space ili odre\u0111eno dugme za skakanje\n        {\n            rb.velocity = new Vector2(rb.veocity.x,jump_speed);//mjenjnje vrijdnosti brzine po y-osi\n            //brzina po x-osi ostaje ista\n        }\n    }\n}\n</code></pre> Pritisnuti Ctrl+S, te se vratiti u Unity. Kliknuti na Player, te u inspectoru kliknuti Add Component. Napisati PlayerMovement i dodati ga Player-u.</p> <p></p> <p>Kompoineta Player Movement izgleda ovako</p> <p></p> <p>Tu sada mo\u017eemo mjenjati move_speed i jump_speed kako nama odgovara.</p> <p>Sada oti\u0107i na komponentu Rigidbody2D, Constraints i checkirati freeze rotation Z.</p> <p></p> <p>Da se tijelo ne rotira kada ska\u010de.</p>"},{"location":"content/Igra/Kretanje/#ground-check","title":"Ground Check","text":"<p>Primjetimo sada da nam Player mo\u017ee da ska\u010de \"beskona\u010dno\". Da bi smo to sprije\u010dli, provjeravati \u0107emo da li nam game objekat Player dodiruje \"tlo\", i ako dodiruje tek onda mo\u017ee da sko\u010di.</p> <p>Sada \u0107emo napraviti funkiciju IsGrounded koja nam to omogu\u0107ava. Otvorimo PlayerMovement skriptu.</p> <p><pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    private Rigidbody2D rb;\n    public float move_speed = 7f;\n    public float jump_speed = 7f; \n\n    private BoxCollider2D coll;//deklaracija varijable tipa BoxCollider2D\n    [SerializeField] private LayerMask ground;//deklaracija varijable tipa LayerMask, u koju \u0107emo staviti kasnije na\u0161e \"tlo\"(layer za tlo)\n\n    private void Start()\n    {\n        rb = GetComponent&lt;Rigidbody2D&gt;();\n        coll = GetComponent&lt;BoxCollider2D&gt;();//inicijalizacija vrijednosti iz BoxCollider2D\n    }\n\n\n    private void Update()\n    {\n        float dirX = Input.GetAxis(\"Horizontal\");\n        rb.velocity = new Vector2(dirX * move_speed , rb.velocity.y);\n\n        if(Input.GetButtonDown(\"Jump\") &amp;&amp; IsGrounded())//dodati jo\u0161 jedan uslov\n        {\n            rb.velocity = new Vector2(rb.velocity.x,jump_speed);\n        }\n    }\n\n    private bool IsGrounded()//funkcija\n    {\n        return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, ground);\n        //Physics2D.BoxCast je funkcija koja oko game objekta pravi ne\u0161to kao hitbox, sli\u010dno kao BoxCollider2D\n        //BoxCast \u0107e provjeravati \u0161ta Player dodiruje\n        //coll.bounds.center, kada se pravi BoxCast on \u0107e da ima oblik kao box collider, i sa ovime \u0107emo da ga postavimo u na istu poziciju\n        //coll.bounds.size da CastBox ima istu veli\u010dinu kao i box collider\n        //0f je za ugao rotacije\n        //Vector2.down govri da \u0107e se box cast pomjerti na dole\n        //.1f govori za koliko da se pomjeri\n        //ground je layer koji BoxCast treba da detektujue \n        //funkcija vra\u0107a bool, true ako Player dodiruje tlo(ground)\n    }\n}\n</code></pre> Dakle, oko Payera smo napravili BoxCast koji izgleda kao box collider, ali je pomjeren na dole za .01f(jako jako malo) i provjerava da li Player dodiruje tlo(ground).  Korist ove funkcije jeste da ako Player bude dodirivao tlo(ground) sa strane, BoxCast ne\u0107e da detektuje to kao ground. Pa Player ne\u0107e mo\u0107i da ska\u010de po \"zidovima\". Sada kliknuti na game objekat Platform, kliknuti na Layer, ,te add layer. Te u prvo slobodno mjesto upisati ground, pritisuti enter te ponovo kliknuti na game objekat Platform, kliknuti na Layer, ,te add layer, sada odabrati ground</p> <p> </p> <p>Sada kliknuti na game objekt Player, te oti\u0107i na komponentu Player Movement, sada treba da se tu jo\u0161 nalazi i opcija Ground, te tu odabrati ground.</p> <p></p> <p>Sada kad pokrenemo igru Player mo\u017ee da sko\u010di samo jednom i to ako dodiruje tlo. Iako Player ne mo\u017ee da ska\u010de po zidovima i dalje mo\u017ee da se zalijepi za njih. Pa zbog toga na game objekat Platform dodati komponentu Platform Effector 2D. Uncheckirati Use One Way i checkirati u Box Collider 2D Used By Effector.</p> <p></p> <p>I sada se Player ne\u0107e da lijepi po zidovima.</p>"},{"location":"content/Igra/Tilemap/","title":"Tilemap","text":""},{"location":"content/Igra/Tilemap/#assets","title":"Assets","text":"<p>Asseti za na\u0161u igru bi\u0107e na github-u. Pa ih tu mo\u017eete download-ati. Onda ih impotrujte u Unity u folder Assets. Ili na linku </p>"},{"location":"content/Igra/Tilemap/#tilemap","title":"Tilemap","text":"<p>Sada \u0107emo da po\u010dnemo da pravimo na\u0161 level. Za to \u0107emo da koristimo Tilemap. Sada u Hierarchy desni klik.</p> <p>2D Object --&gt; Tilemap --&gt; Rectangular Nazvati tilemap Terrain. </p> <p>Tilemap funkcioni\u0161e tako \u0161to nam ekran podijeli na kvadrate, u na\u0161em slu\u010daju 16x16 pixela, u koje mo\u017eemo da postavimo assete.</p> <p>Sada otvoriti Tile Pallete. Window --&gt; 2D --&gt; Tile Pallete</p> <p> Kliknuti Create New Pallete i nazvti je Terrain i sa\u010duvati je u folder Assets. Obrisati game objekt Platform. I oti\u0107i u folderu Pixel Adveture 1 u folder Terrain. Na\u0107i  sliku Terrain i klinuti na nju. U Inspectoru postaviti </p> <p>Sprite mode na Multiple</p> <p>Pixels Per Unit na 16</p> <p>Filter Mode na Point(no filter)</p> <p>I kliknuti Apply.</p> <p></p>"},{"location":"content/Igra/Tilemap/#crtanje-levela","title":"Crtanje Levela","text":"<p>Sada kliknuti Sprtie Editor, da bi smo isjekli sliku na 16x16 px dijelove. Lijevi gornji ugao Slice --&gt; Type --&gt; Grid By Cell Size.</p> <p></p> <p>Sada oti\u0107i  an Tile Pallete i drag &amp; drop sliku Terrain u nju.</p> <p></p> <p>Kada to uradite, sa\u010duvait paletu u novi folder Tiles. I sad kada kliknete na kliknete na \u010detkicu u Tile Pallete ili stisnete B mo\u017eete crtati po prozoru.</p> <p></p> <p>Sada u Hierarchy desni klik na Grid --&gt; 2D Object --&gt; Tilemap --&gt; Rectangular. Nazvati tilemap Background. Sada u folderu PA1 na\u0107i Bacground i izabrati jedan. U Inspectoru uraditi ponovo postavke kao i kod Terraina. I isje\u0107i isto. </p> <p>Sada oti\u0107i na Tile Palette i drag &amp; drop. Kliknuti na Background u Hierarchy i u Tilemap Renderer postaviti Oredr in Layer na -1.</p> <p></p> <p>Ovo nam omogu\u0107ava da nam background bude iza terraina. Sada sa Tile Palletom nacrtati backgound.</p> <p></p> <p>Napomena: provjeri da li je u Tile Palletu odabran background.</p> <p>Sada klknuti na game objekt Terrain i oti\u0107i na Inspector. Dodati komponente Tilemap Collider 2D. Tilemap Collider 2D kao i Box Collider pravi oko game objekta hit box, samo \u0161to Tilemap Collider pravi oko svakog kvadrati\u0107a \u0161to smo nacratali pojedina\u010dno. Po\u0161to \u0107emo mi kroz igru koriti samo prve redove kvadrati\u0107a od Terraina. Da bi smo napravili samo da nam Collider bude oko \u010ditavog terraina korititi \u0107eamo Compostie Collider 2D. Tako\u0111er dodati Platform Effector 2D. I postaviti  Layer Ground na vrhu.</p> <p></p> <p>Sada pokrenuti igru i provejriti da li je sve uredu.</p> <p>Napomena: Ako treba dodati Rigidbody 2D i postavit Body Type na Static.</p> <p>Sada mo\u017eemo oti\u0107i u folder Main Characters i odabrati jednog, te na\u0107i sliku Idle(napravit postavke kao i za Terrain, ali kad se bude sijeklo isje\u0107i na 32x32). Te kliknuti na game objekat Player i u Inspectoru oti\u0107i na Sprite Renderer te u Sprite ubaciti prvu sliku.</p> <p>Napomena: Ako slika bude izgledala \u010dudno, stavti Compression na None.</p> <p></p> <p>Onda Box Collider namjetiti da odgovara slici.</p> <p></p>"}]}